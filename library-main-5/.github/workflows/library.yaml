name: Go CI

on:
  pull_request

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 7
    permissions: write-all
    if: github.event.pull_request.head.ref == 'hw'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Ensure branch is up-to-date with main
        run: |
          git fetch origin main
          if git merge-base --is-ancestor origin/main @; then
            echo 'Tests are already up-to-date'
          else
            echo 'Your tests have not been updated, try to rebase main' && exit 1
          fi
      - name: Check for YAML and Test changes
        run: |
          CHANGES=$(git diff --minimal --name-only origin/main...@ | grep -E '(pull_request_template\.md|\.golangci\.yaml|library\.yaml|integration_test\.go)$' | wc -l)
          if [ "$CHANGES" -ne 0 ]; then
            echo "Changes detected in YAML or Test files: $CHANGES files changed."
            exit 1
          else
            echo "No changes in YAML or Test Go files."
          fi
      - name: Check description
        run: |
          shopt -s extglob
          hours=$(echo "${{ github.event.pull_request.body }}" | sed -n 3p | tr -d '[:space:]')
          if [[ "$hours" == +([[:digit:]]) ]]; then
            echo "Hours: $hours"
          else
            echo "Please include the number of hours spent in the pull request description."
            echo "Ensure the third line of the PR description contains exactly one numerical value."
            echo "After correcting the issue, please push your changes to the branch."
            exit 1
          fi
      - name: Check if third-party protos was not uploaded to repo
        run: |
          proto=$(find . -type f -iname "*.proto" | wc -l | tr -d '[:space:]')
          if [[ $proto -ne 1 ]]; then
            echo "Only one proto file expected (library.proto)."
            echo "Download necessary dependencies via \"generate\" label in makefile."
            exit 1
          fi
      - name: Check if generated code was not uploaded to repo
        run: |
          proto=$(find . -not \( -path "./integration" -prune \) -and \( -type f -iname "*.pb.go" -o -iname "*.pb.gw.go" \) | wc -l | tr -d '[:space:]')
          if [[ $proto -ne 0 ]]; then
            echo "Generated files should not be uploaded to repo."
            echo "Instead, define \"generate\" label in makefile."
            exit 1
          fi
      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache-dependency-path: ./go.sum
      - name: Generate code
        run: |
          make generate
      - name: Dependencies
        working-directory: ./
        run: go mod tidy
      - uses: gwatts/go-coverage-action@v2
        id: coverage
        with:
          coverage-threshold: 75
          fail-coverage: always
          cover-pkg: ./...
          ignore-pattern: |
            \.pb\.go$
            .json$
            _mock\.go$
            _minimock\.go$
      - name: Linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.61
      - name: Generate Random Ports and Check Availability
        run: |
          function find_free_port {
          while true; do
           PORT=$((RANDOM%16383+49152))
           if ! lsof -i:$PORT; then
             echo $PORT
             return
           fi
          done
          }
          export GRPC_PORT=$(find_free_port)
          export GRPC_GATEWAY_PORT=$(find_free_port)
          echo "GRPC_PORT=$GRPC_PORT" >> $GITHUB_ENV
          echo "GRPC_GATEWAY_PORT=$GRPC_GATEWAY_PORT" >> $GITHUB_ENV
      - name: Start Service
        run: |
          make run &
          echo $! > service_pid.txt
      - name: Install gRPC Health Probe
        run: |
          curl -L https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.4.14/grpc_health_probe-linux-amd64 \
            -o grpc_health_probe
          chmod +x grpc_health_probe
      - name: Wait for gRPC service to be Ready
        run: |
          for i in {1..13}; do
            if ./grpc_health_probe -addr=localhost:$GRPC_PORT; then
              echo "Service is ready"
              exit 0
            fi
            echo "Waiting for service..."
            sleep 3
          done
          echo "Service did not start in time"
          exit 1
      - name: Wait for gRPC gateway to be Ready
        run: |
          for i in {1..13}; do
            if curl --fail http://localhost:$GRPC_GATEWAY_PORT/health; then
              echo "Service is ready"
              exit 0
            fi
            echo "Waiting for service..."
            sleep 3
          done
          echo "Service did not start in time"
          exit 1
      - name: Run integration tests
        run: go test -v -race -timeout 4m -tags=integration ./...
      - name: Run unit tests
        run: go test -v -race -timeout 10m  ./...
      - name: Stop Service
        run: kill $(cat service_pid.txt)
